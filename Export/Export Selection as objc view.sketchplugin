// Export Selection as Objective-C view

#import '../buscarini/library.js'

// Utility functions

function addAnimationValue(animationInfo,layerName,key,value) {
	if (!animationInfo) return
	if (!animationInfo.keyPaths[key]) animationInfo.keyPaths[key] = {}

	log(key)

	if (animationInfo.keyPaths[key][layerName]==undefined) animationInfo.keyPaths[key][layerName] = []
	animationInfo.keyPaths[key][layerName].push(value)
}


function finalLayerNameFromString(layerName) {
	var name = com.buscarini.utils.nameForVariable(layerName)
	return com.buscarini.utils.appendSuffixOnce(name,"Layer")
}

function finalLayerName(layer) {
	return finalLayerNameFromString(layer.name())
}

function finalViewName(name) {
	var viewName = com.buscarini.utils.normalizeName(name)
	return com.buscarini.utils.appendSuffixOnce(viewName,"View")
}


// Processing functions

function processLayerStyle(layerName,layer,generationInfo,classInfo) {
		
	var layerStyle = [layer style]

	var performInit = classInfo.methods["performInit"]

	var firstFill = com.buscarini.utils.firstStylePart([layerStyle fills])
		
	if (firstFill) {
		if (!com.buscarini.utils.isGradientFill(firstFill)) {
			var fillColor = [firstFill color]

			var colorString = "[UIColor colorWithRed:"+[fillColor red]+" green:"+[fillColor green]+" blue:"+[fillColor blue]+" alpha:"+[fillColor alpha]+"].CGColor"
			
			addAnimationValue(generationInfo.currentAnimationInfo,layerName,"fillColor","(id)" + colorString)

			performInit.body.push(
				"",
				"\tself."+layerName+".fillColor = " + colorString + ";"
			)			
		}
		else {
			var gradient = [firstFill gradient]
			var from = [gradient from]
			var to = [gradient to]
			performInit.body.push(
				"",
				"\tself."+layerName+".startPoint = CGPointMake(" + from.x + ","+ from.y +");",
				"\tself."+layerName+".endPoint = CGPointMake(" + to.x + ","+ to.y +");"
			)
			
			var gradientStops = [gradient stops]
			var gradientPositions = []
			var gradientColors = []
			for (var i = 0; i < [gradientStops count]; i++) {
				var gradientStop = [gradientStops objectAtIndex:i]
				log("gradientStop" + i)
				gradientPositions.push("@("+[gradientStop position]+")")
				var color = [gradientStop color]
				gradientColors.push("(id)[UIColor colorWithRed:"+[color red]+" green:"+[color green]+" blue:"+[color blue]+" alpha:"+[color alpha]+"].CGColor")
			}
			
			performInit.body.push(
				"\tself."+layerName+".locations = @["+ gradientPositions.join(",") +"];",
				"\tself."+layerName+".colors = @["+ gradientColors.join(",") +"];"
			)
		}
	}
	
	if (com.buscarini.utils.isGradientFill(firstFill)) {
		layerName = layerName + "Mask"
	}

	var firstBorder = com.buscarini.utils.firstStylePart([layerStyle borders])

	if (firstBorder) {
		var borderColor = [firstBorder color]
			
		var colorString = "[UIColor colorWithRed:"+[borderColor red]+" green:"+[borderColor green]+" blue:"+[borderColor blue]+" alpha:"+[borderColor alpha]+"].CGColor"
		
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"strokeColor","(id)" + colorString)
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"lineWidth","@(" + [firstBorder thickness] + ")")

		performInit.body.push(
			"",
			"\tself."+layerName+".strokeColor = "+colorString+";",
			"\tself."+layerName+".lineWidth = "+[firstBorder thickness]+";"
		)
	}
	
	var firstShadow = com.buscarini.utils.firstStylePart([layerStyle shadows])
	if (firstShadow) {
		var shadowColor = [firstShadow color]
		
			var colorString = "[UIColor colorWithRed:"+[shadowColor red]+" green:"+[shadowColor green]+" blue:"+[shadowColor blue]+" alpha:"+[shadowColor alpha]+"].CGColor"
		
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"shadowColor","(id)" + colorString)
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"shadowOffset","[NSValue valueWithCGSize:CGSizeMake("+[firstShadow offsetX]+","+[firstShadow offsetY]+")]")
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"shadowRadius","@(" + [firstShadow blurRadius] + ")")
		
		performInit.body.push(
			"",
			"\tself."+layerName+".shadowColor = "+colorString+";",
			"\tself."+layerName+".shadowOffset = CGSizeMake("+[firstShadow offsetX]+","+[firstShadow offsetY]+");",
			"\tself."+layerName+".shadowRadius = "+[firstShadow blurRadius]+";",
			"\tself."+layerName+".shadowOpacity = 1.0;"
		)
	}
	
	var opacity = [[[layer style] contextSettings] opacity]
	
	addAnimationValue(generationInfo.currentAnimationInfo,layerName,"opacity","@(" + opacity + ")")
	
	performInit.body.push(
		"",
		"\tself."+layerName+".opacity = " + opacity + ";"
	)
	
	// if ([layer isFlippedHorizontal]) {
	// 		performInit.body.push(
	// 			"",
	// 			"\tself."+layerName+".transform = CATransform3DRotate(self."+layerName+".transform,M_PI, 0, 1, 0);"
	// 		)
	// 	}
	//
	// 	if ([layer isFlippedVertical]) {
	// 		performInit.body.push(
	// 			"",
	// 			"\tself."+layerName+".transform = CATransform3DRotate(self."+layerName+".transform,M_PI, 1, 0, 0);"
	// 		)
	// 	}
}

function processPoint(layerName,index,previousPoint,point,absoluteRect,rootFrame,generationInfo,method) {

	// var proportionW = [absoluteRect width]/[rootFrame width]
// 	var proportionH = [absoluteRect height]/[rootFrame height]
//
// 	log("Proportions:" + proportionW + " " + proportionH)
//
// 	var proportion = proportionW
// 	if (proportionW>proportionH) proportion = proportionH
	
	var originX = 0//[absoluteRect x]
	var originY = 0//[absoluteRect y]
	
	var proportion = 1
	
	var x = (point.point().x*[absoluteRect width]+originX)*proportion
	var y = (point.point().y*[absoluteRect height]+originY)*proportion
	var controlPoint1x = (previousPoint.curveFrom().x*[absoluteRect width]+originX)*proportion
	var controlPoint1y = (previousPoint.curveFrom().y*[absoluteRect height]+originY)*proportion
	var controlPoint2x = (point.curveTo().x*[absoluteRect width]+originX)*proportion
	var controlPoint2y = (point.curveTo().y*[absoluteRect height]+originY)*proportion
	
	if (index==0) {
		method.body.push("\t["+layerName+"Path moveToPoint:CGPointMake("+x+","+y+")];")
	}
	else if (point.curveFrom() && point.curveTo()) {
		method.body.push("\t["+layerName+"Path addCurveToPoint:CGPointMake("+x+","+y+") controlPoint1:CGPointMake("+controlPoint1x+","+controlPoint1y+") controlPoint2:CGPointMake("+controlPoint2x+","+controlPoint2y+")];")
	}
	else {
		method.body.push("\t["+layerName+"Path addLineToPoint:CGPointMake("+x+","+y+")];")
	}
}

function processBezierLayerPath(layer,parentLayer,rootFrame,generationInfo,classInfo) {
	log("processing bezier layer path " + layer)
	
	if(layer && layer.isKindOfClass(MSShapePathLayer)) {

		var parentGroup = [layer parentGroup]
		var absoluteRect = [parentGroup frame]
		var layerName = finalLayerName(parentGroup)

		log("parentGroup: " + parentGroup)

		var grandpaGroup = [parentGroup parentGroup]
			
		log("grandpaGroup: " + grandpaGroup)
			
		var grandpaLayerName = finalLayerName(grandpaGroup)
			
		//layerName += com.buscarini.utils.firstLetterUppercase(grandpaLayerName)

		var path = layer.path()
				
		var methodName = "new"+com.buscarini.utils.firstLetterUppercase(layerName)
		if (!com.buscarini.utils.isAnimation(grandpaGroup)) methodName += com.buscarini.utils.firstLetterUppercase(grandpaLayerName)
		methodName += "Path"

		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"path","(id)[self "+methodName +"].CGPath")
		addAnimationValue(generationInfo.currentAnimationInfo,layerName,"shadowPath","(id)[self "+methodName +"].CGPath")
						
		var pathMethod = new Method("UIBezierPath *",methodName)
		classInfo.methods[methodName] = pathMethod
		pathMethod.body.push("\tUIBezierPath *"+layerName+"Path = [UIBezierPath bezierPath];","")

		log("processing points")

		var points = path.points()
		for (var j = 0; j < [points count]; j++) {
			
			log("processing point: " + j)

		    var point = [points objectAtIndex:j]

			var previousPoint = null				
			if (j==0) {
			    previousPoint = [points objectAtIndex:[points count]-1]
			}
			else {
			    previousPoint = [points objectAtIndex:j-1]
			}
			
			processPoint(layerName,j,previousPoint,point,absoluteRect,rootFrame,generationInfo,pathMethod)
			
			if (j==[points count]-1) {
				point = [points objectAtIndex:0]
				
			    previousPoint = [points objectAtIndex:j]
				processPoint(layerName,j,previousPoint,point,absoluteRect,rootFrame,generationInfo,pathMethod)
			}
		}
		
		pathMethod.body.push(
			"\t["+layerName+"Path closePath];",
			"",
			"\treturn "+layerName+"Path;"
		)
		
		return methodName
	}	
}

function processBezierLayer(layer,parentLayer,rootFrame,generationInfo,classInfo) {
	log("processing bezier layer " + layer)
	
	if(layer && layer.isKindOfClass(MSShapePathLayer)) {
		var parentGroup = [layer parentGroup]
		var layerName = finalLayerName(parentGroup)
		
		var frame = [parentGroup frame]
		var currentFrame = [layer frame]
		
		if (generationInfo.currentAnimationInfo) {
			processBezierLayerPath(layer,parentLayer,rootFrame,generationInfo,classInfo)
			processLayerStyle(layerName,parentGroup,generationInfo,classInfo)
		}
		else {
			generationInfo.properties.layers.push(layerName)
		
			var layerProperty = null
			var layerMaskProperty = null
			
			var layerMaskName = layerName + "Mask"
				
			var isGradient = com.buscarini.utils.isGradientLayer(parentGroup)
				
			if (isGradient) {
				layerProperty = new Property("CAGradientLayer *",layerName)
				classInfo.properties[layerName] = layerProperty
				
				layerMaskProperty = new Property("CAShapeLayer *",layerMaskName)
				classInfo.properties[layerMaskName] = layerMaskProperty
			}
			else {
				layerProperty = new Property("CAShapeLayer *",layerName)
				classInfo.properties[layerName] = layerProperty				
			}

			var methodName = processBezierLayerPath(layer,parentLayer,rootFrame,generationInfo,classInfo)
		
			var performInit = classInfo.methods["performInit"]
			performInit.body.push(
				"\t// " + layerName
			)
		
			if (isGradient) {
				performInit.body.push(
					"\tself."+layerName+" = [CAGradientLayer layer];",
					"\tself."+layerMaskName+" = [CAShapeLayer layer];",
					"\tself."+layerMaskName+".path = [self "+methodName+"].CGPath;",
					"\tself."+layerMaskName+".shadowPath = self."+layerMaskName+".path;",
					"\t[self."+layerName+" addSublayer:self."+layerMaskName+"];",
					"\tself."+layerName+".mask = self."+layerMaskName+";"
				)
			}
			else {
				performInit.body.push(
					"\tself."+layerName+" = [CAShapeLayer layer];",
					"\tself."+layerName+".path = [self "+methodName+"].CGPath;",
					"\tself."+layerName+".shadowPath = self."+layerName+".path;"
				)
			}
		
			performInit.body.push(
				"",
				"\t["+parentLayer+" insertSublayer:self."+layerName+" atIndex:0];",
				"",
				"\tself."+layerName+".frame = CGRectMake("+[frame x]+","+[frame y]+","+[frame width]+","+[frame height]+");",
				""
			)
			
			
			var layoutMethodName = "layoutLayer" + com.buscarini.utils.firstLetterUppercase(layerName)
			var layoutLayerView = new Method("void",layoutMethodName)
			classInfo.methods[layoutMethodName] = layoutLayerView

			var layoutSubviews = classInfo.methods["layoutSubviews"]
			layoutSubviews.body.push(
							"\t// " + layerName,
							"\t[self "+layoutMethodName+"];",
							"")
		
			layoutLayerView.body.push(
				"\tCGRect "+layerName+"BoundingBox = CGRectMake(0,0,"+[rootFrame width]+","+[rootFrame height]+");",
		        "\t",
				"\tCGFloat "+layerName+"BoundingBoxAspectRatio = CGRectGetWidth("+layerName+"BoundingBox)/CGRectGetHeight("+layerName+"BoundingBox);",
				"\tCGFloat "+layerName+"ViewAspectRatio = CGRectGetWidth(self.frame)/CGRectGetHeight(self.frame);",
		        "\t",
				"\tCGFloat "+layerName+"ScaleFactor = 1.0;",
				"\tif ("+layerName+"BoundingBoxAspectRatio > "+layerName+"ViewAspectRatio) {",
				"\t	"+layerName+"ScaleFactor = CGRectGetWidth(self.frame)/CGRectGetWidth("+layerName+"BoundingBox);",
				"\t} else {",
				"\t	"+layerName+"ScaleFactor = CGRectGetHeight(self.frame)/CGRectGetHeight("+layerName+"BoundingBox);",
				"\t}",
		        "\t",
		        "\t",
				"\tCGAffineTransform "+layerName+"ScaleTransform = CGAffineTransformIdentity;",
				"\t"+layerName+"ScaleTransform = CGAffineTransformScale("+layerName+"ScaleTransform, "+layerName+"ScaleFactor, "+layerName+"ScaleFactor);",
				"\t"+layerName+"ScaleTransform = CGAffineTransformTranslate("+layerName+"ScaleTransform, -CGRectGetMinX("+layerName+"BoundingBox), -CGRectGetMinY("+layerName+"BoundingBox));",
		        "\t",
				"\tCGSize "+layerName+"ScaledSize = CGSizeApplyAffineTransform("+layerName+"BoundingBox.size, CGAffineTransformMakeScale("+layerName+"ScaleFactor, "+layerName+"ScaleFactor));",
				"\tCGSize "+layerName+"CenterOffset = CGSizeMake((CGRectGetWidth(self.frame)-"+layerName+"ScaledSize.width)/("+layerName+"ScaleFactor*2.0),",
				"\t								 (CGRectGetHeight(self.frame)-"+layerName+"ScaledSize.height)/("+layerName+"ScaleFactor*2.0));",
				"\t"+layerName+"ScaleTransform = CGAffineTransformTranslate("+layerName+"ScaleTransform, "+layerName+"CenterOffset.width, "+layerName+"CenterOffset.height);",
		        "\t",
				"\tself."+layerName+".frame = CGRectMake(self."+layerName+".frame.origin.x*"+layerName+"ScaleFactor,self."+layerName+".frame.origin.y*"+layerName+"ScaleFactor,self."+layerName+".frame.size.width,self."+layerName+".frame.size.height);"
			)
			
			if (isGradient) {
				layoutLayerView.body.push(
					"\tCGPathRef "+layerName+"Path = CGPathCreateCopyByTransformingPath(self."+layerMaskName+".path,&"+layerName+"ScaleTransform);",
					"\t",
					"\tself."+layerMaskName+".path = "+layerName+"Path;",
					"\tself."+layerMaskName+".lineWidth = self."+layerMaskName+".lineWidth*"+layerName+"ScaleFactor;",
					"\tself."+layerMaskName+".shadowOffset = CGSizeMake(self."+layerMaskName+".shadowOffset.width*"+layerName+"ScaleFactor,self."+layerMaskName+".shadowOffset.height*"+layerName+"ScaleFactor);",
				"\tself."+layerMaskName+".shadowRadius = self."+layerMaskName+".shadowRadius*"+layerName+"ScaleFactor;"
				)
			}
			else {
				layoutLayerView.body.push(
					"\tCGPathRef "+layerName+"Path = CGPathCreateCopyByTransformingPath(self."+layerName+".path,&"+layerName+"ScaleTransform);",
			        "\t",
					"\tself."+layerName+".path = "+layerName+"Path;",
					"\tself."+layerName+".lineWidth = self."+layerName+".lineWidth*"+layerName+"ScaleFactor;",
					"\tself."+layerName+".shadowOffset = CGSizeMake(self."+layerName+".shadowOffset.width*"+layerName+"ScaleFactor,self."+layerName+".shadowOffset.height*"+layerName+"ScaleFactor);",
					"\tself."+layerName+".shadowRadius = self."+layerName+".shadowRadius*"+layerName+"ScaleFactor;"
				)				
			}
			
			layoutLayerView.body.push(
		        "\t",
				"\tCGPathRelease("+layerName+"Path); ",
				""
			)
		
			processLayerStyle(layerName,parentGroup,generationInfo,classInfo)
			performInit.body.push("")
		
			return layerName
		}
	}
	
	return null
}

function processContainerLayer(layer,parentLayer,rootFrame,generationInfo,classInfo) {
	var layerName = finalLayerName(layer)
	var frame = [layer frame]
	
	var layerProperty = new Property("CALayer *",layerName)
		
	log("layer" + layer + "parentLayer" + parentLayer + "rootFrame" + rootFrame + "generationInfo" + generationInfo + "classInfo" + classInfo)
		
	classInfo.properties[layerName] = layerProperty
	
	var x = [frame x]
	var y = [frame y]
		
	if (generationInfo.currentLevel==0) {
		x = 0
		y = 0
	}
	
	var performInit = classInfo.methods["performInit"]
	
	log(classInfo.methods)
	
	performInit.body.push(
		"\t// " + layerName,
		"\tself."+layerName+" = [CALayer layer];",
		"",
		// "\t[self.layer addSublayer:self."+layerName+"];",
		"\t["+parentLayer+" insertSublayer:self."+layerName+" atIndex:0];",
		"",
		"\tself."+layerName+".frame = CGRectMake("+x+","+y+","+[frame width]+","+[frame height]+");",
		""
	)
	
	return layerName
}

function processAnimationKey(keyPath,animationInfo,classInfo) {
	// Generate animations
	var animationDic = animationInfo.keyPaths[keyPath]
	for (var key in animationDic) {
	    if (animationDic.hasOwnProperty(key)) {
			var animationValues = animationDic[key]
				
			if (com.buscarini.utils.allValuesEqual(animationValues)) return

			var animationValuesString = animationValues.join(",")
			
			var layerName = key

			var repeatCount = animationInfo.repeatCount
				log(repeatCount)
			if (repeatCount=="always" || repeatCount=="infinite") repeatCount = "HUGE_VALF"
				log(repeatCount)

			var animationName = layerName+com.buscarini.utils.firstLetterUppercase(keyPath)+"Animation"

			var animationMethod = classInfo.methods[animationInfo.animationName]
			animationMethod.body.push(
				"\tCAKeyframeAnimation *"+animationName+" = [CAKeyframeAnimation animationWithKeyPath:@\""+keyPath+"\"];",
				"\t"+animationName+".duration = "+animationInfo.duration+";",
				"\t"+animationName+".timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];",
				"\t"+animationName+".repeatCount = "+repeatCount+";",
				"\t"+animationName+".autoreverses = YES;",
				"\t"+animationName+".values = @["+animationValuesString+"];",
				"\t[self."+layerName+" addAnimation:"+animationName+" forKey:@\""+keyPath+"\"];",
				""
			)
		}
	}
}

function processLayerAnimation(layer,parentLayer,rootFrame,generationInfo,classInfo) {
	log("processing layer animation for " + layer)
		
	if (com.buscarini.utils.isGroup(layer)) {
		if (com.buscarini.utils.isAnimation(layer)) {
			generationInfo.currentAnimationInfo = com.buscarini.utils.readAnimationParameters(layer)
			
			var animationMethod = new IBActionMethod(generationInfo.currentAnimationInfo.animationName)
			classInfo.methods[generationInfo.currentAnimationInfo.animationName] = animationMethod
			generationInfo.animations.push(generationInfo.currentAnimationInfo.animationName)
				
			//// ONLY FOR DEBUGGING!!
			var performInit = classInfo.methods["performInit"]
			performInit.body.push("\t[self "+animationMethod.name+":self];")

			generationInfo.currentAnimationInfo.keyPaths = {}

			// Process sublayers
		    var sublayers = [layer layers];
		    for (var sub=([sublayers count] - 1); sub >= 0; sub--) {
		        var sublayer = [sublayers objectAtIndex:sub]
				generationInfo.currentLevel = generationInfo.currentLevel+1		
				processLayer(sublayer,parentLayer,rootFrame,generationInfo,classInfo)
				generationInfo.currentLevel = generationInfo.currentLevel-1
			}
			
			// Generate animations
			processAnimationKey("opacity",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("path",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("shadowPath",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("fillColor",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("strokeColor",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("lineWidth",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("shadowColor",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("shadowOffset",generationInfo.currentAnimationInfo,classInfo)
			processAnimationKey("shadowRadius",generationInfo.currentAnimationInfo,classInfo)
			
			generationInfo.currentAnimationInfo = null
		}
		else {
			// Process sublayers
		    var sublayers = [layer layers];
		    for (var sub=([sublayers count] - 1); sub >= 0; sub--) {
		        var sublayer = [sublayers objectAtIndex:sub]
				generationInfo.currentLevel = generationInfo.currentLevel+1		
				processLayer(sublayer,parentLayer,rootFrame,generationInfo,classInfo)
				generationInfo.currentLevel = generationInfo.currentLevel-1
			}
		}
	}
	else {			
		processBezierLayer(layer,parentLayer,rootFrame,generationInfo,classInfo)
		// var methodName = processBezierLayerPath(layer,parentLayer,rootFrame,generationInfo,classInfo)
		
	}
}

function processLayer(layer,parentLayer,rootFrame,generationInfo,classInfo) {
	log("processing layer " + layer)

	// if (!layer || !layer.isVisible()) return
	if (!layer || !com.buscarini.utils.isVisible(layer)) return null
			
	if (com.buscarini.utils.isGroup(layer)) {
		if (com.buscarini.utils.isAnimation(layer) || generationInfo.currentAnimationInfo) {
			processLayerAnimation(layer,parentLayer,rootFrame,generationInfo,classInfo)
		}
		else {
			var layerName = processContainerLayer(layer,parentLayer,rootFrame,generationInfo,classInfo)
			
		    var sublayers = [layer layers];
		    for (var sub=([sublayers count] - 1); sub >= 0; sub--) {
		        var sublayer = [sublayers objectAtIndex:sub]
				generationInfo.currentLevel = generationInfo.currentLevel+1
				processLayer(sublayer,"self."+layerName,rootFrame,generationInfo,classInfo)
				generationInfo.currentLevel = generationInfo.currentLevel-1
			}
		}
	}
	else if (layer.isKindOfClass(MSShapeGroup))  {
		sublayer = [[layer layers] objectAtIndex:0]
		generationInfo.currentLevel = generationInfo.currentLevel+1
		processLayer(sublayer,parentLayer,rootFrame,generationInfo,classInfo)
		generationInfo.currentLevel = generationInfo.currentLevel-1		
	}
	else if (layer.isKindOfClass(MSShapePathLayer)) {
		if (generationInfo.currentAnimationInfo) {
			processLayerAnimation(layer,parentLayer,rootFrame,generationInfo,classInfo)
		}
		else {
			processBezierLayer(layer,parentLayer,rootFrame,generationInfo,classInfo)		
		}
	}
}

function main() {

	if ([selection count]<=0) {
		[doc showMessage:"Nothing selected"];
	}
	else {
		var viewName = null
		if ([selection count]==1) {
			var selectedLayer = selection[0]
			viewName = finalViewName(selectedLayer.name())
		}
		else {
			// viewName = com.buscarini.utils.normalizeName([doc askForUserInput:"View class name?" initialValue:"MyView"])
			viewName = finalViewName([doc askForUserInput:"View class name?" initialValue:"MyView"])
		}
	
		var panel = [NSOpenPanel openPanel]

		[panel setAllowsMultipleSelection:false];
		[panel setCanChooseDirectories:true];
		[panel setCanChooseFiles:false];
	
		var result = [panel runModal]
		log("path choose result: " + result)
		
		if (result != NSFileHandlingPanelOKButton) return
		
		var path = [[panel URLs] lastObject];

		var generationInfo = { methods : {
									paths : {}
											},
								properties : {
									layers : []
								},
								animations : [],
								currentLevel : 0,
								currentAnimationInfo : null
							}

		var headerFile = [path URLByAppendingPathComponent:viewName + ".h"]
		var implementationFile = [path URLByAppendingPathComponent:viewName + ".m"]
		
		log("Final header and imp files: " + headerFile + " " + implementationFile)

		var classInfo = new ClassInfo(viewName)
		classInfo.parentClass = "UIView"
		classInfo.designable = true
	
		var uikitImport = new Import("UIKit/UIKit.h")
		uikitImport.relative = false
		uikitImport.public = true
		classInfo.imports["uikit"] = uikitImport
			
		var quartzCoreImport = new Import("QuartzCore/QuartzCore.h")
		quartzCoreImport.relative = false
		quartzCoreImport.public = false
		classInfo.imports["quartzCore"] = quartzCoreImport
		
		var initFrameMethod = new Method("id","initWithFrame")
		initFrameMethod.public = false
		initFrameMethod.parameters.push(new Parameter(null,"CGRect","frame"))
		initFrameMethod.body.push(
								"\tself = [super initWithFrame:frame];",
								"\tif (self) {",
								"\t\t[self performInit];",
								"\t}",
								"\treturn self;"
								)
		classInfo.methods['initFrame'] = initFrameMethod
								
		var initCoderMethod = new Method("id","initWithCoder")
		initCoderMethod.public = false
		initCoderMethod.parameters.push(new Parameter(null,"NSCoder *","aDecoder"))
		initCoderMethod.body.push(
								"\tself = [super initWithCoder:aDecoder];",
								"\tif (self) {",
								"\t\t[self performInit];",
								"\t}",
								"\treturn self;"
								)
		classInfo.methods['initCoder'] = initCoderMethod
								
		var performInitMethod = new Method("void","performInit")
		performInitMethod.public = false
		classInfo.methods['performInit'] = performInitMethod
		
		var layoutSubviewsMethod = new Method("void","layoutSubviews")
		layoutSubviewsMethod.public = false
		classInfo.methods['layoutSubviews'] = layoutSubviewsMethod

		for (var i=0; i<[selection count]; i++) {
			var layer = [selection objectAtIndex:i];
			processLayer(layer,"self.layer",layer.frame(),generationInfo,classInfo)
		}

		var header = com.buscarini.objc.generateHeader(classInfo)
		var implementation = com.buscarini.objc.generateImplementation(classInfo)
	
		log("Writing files")

		var fileManager = [NSFileManager defaultManager];
	
		var headerString = [NSString stringWithString:header]

		if ([headerString writeToURL:headerFile atomically:true encoding:NSUTF8StringEncoding error:null]) {
			var implementationString = [NSString stringWithString:implementation]
			if ([implementationString writeToURL:implementationFile atomically:true encoding:NSUTF8StringEncoding error:null]) {
				[doc showMessage:"Done"];
			}			
			else {
				[doc showMessage:"Error writing files"];				
			}
		}
		else {
			[doc showMessage:"Error writing files"];
		}
	}

}

main()

