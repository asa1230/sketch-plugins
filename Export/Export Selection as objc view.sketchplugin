// Export Selection as Objective-C view

#import '../buscarini/library.js'

function dump(obj){
  log("######################################")
  log("## Dumping object " + obj )
  log("## obj class is: " + [obj className])
  log("######################################")

  log("obj.mocha:")
  log([obj class].mocha())

  log("obj.properties:")
  log([obj class].mocha().properties())
  log("obj.propertiesWithAncestors:")
  log([obj class].mocha().propertiesWithAncestors())

  log("obj.classMethods:")
  log([obj class].mocha().classMethods())
  log("obj.classMethodsWithAncestors:")
  log([obj class].mocha().classMethodsWithAncestors())

  log("obj.instanceMethods:")
  log([obj class].mocha().instanceMethods())
  log("obj.instanceMethodsWithAncestors:")
  log([obj class].mocha().instanceMethodsWithAncestors())

  log("obj.instanceVariables:")
  log([obj class].mocha().instanceVariables())


  log("obj.protocols:")
  log([obj class].mocha().protocols())
  log("obj.protocolsWithAncestors:")
  log([obj class].mocha().protocolsWithAncestors())

  log("obj.treeAsDictionary():")
  log(obj.treeAsDictionary())
}


function isGroup(layer) {
  return [layer isMemberOfClass:[MSLayerGroup class]] || [layer isMemberOfClass:[MSArtboardGroup class]]
}

function processLayerStyle(layerName,layer) {
	var result = []
		
	var layerStyle = [layer style]
				
	if ([[layerStyle fills] count]>0) {
		var firstFill = null
		for (var fillIndex = 0; fillIndex < [[layerStyle fills] count]; fillIndex++) {
			var fill = [[layerStyle fills] objectAtIndex:fillIndex]
			if ([fill isEnabled]) {
				firstFill = fill
				break;
			}
		}
		
		if (firstFill) {
			var fillColor = [firstFill color]
		
			result = result.concat([
				"",
				"\t"+layerName+".fillColor = [UIColor colorWithRed:"+[fillColor red]+" green:"+[fillColor green]+" blue:"+[fillColor blue]+" alpha:"+[fillColor alpha]+"].CGColor;"
			])				
		}
	}

	if ([[layerStyle borders] count]>0) {
		var firstBorder = null
		for (var borderIndex = 0; borderIndex < [[layerStyle borders] count]; borderIndex++) {
			var border = [[layerStyle borders] objectAtIndex:borderIndex]
			if ([border isEnabled]) {
				firstBorder = border
				break;
			}
		}

		if (firstBorder) {
			var borderColor = [firstBorder color]
			result = result.concat([
				"",
				"\t"+layerName+".strokeColor = [UIColor colorWithRed:"+[borderColor red]+" green:"+[borderColor green]+" blue:"+[borderColor blue]+" alpha:"+[borderColor alpha]+"].CGColor;",
				"\t"+layerName+".lineWidth = "+[firstBorder thickness]+";"
			])
		}
	}
	
	if ([[layerStyle shadows] count]>0) {
		var firstShadow = null
		for (var shadowIndex = 0; shadowIndex < [[layerStyle shadows] count]; shadowIndex++) {
			var shadow = [[layerStyle shadows] objectAtIndex:shadowIndex]
			if ([shadow isEnabled]) {
				firstShadow = shadow
				break;
			}
		}
			
		if (firstShadow) {
			var shadowColor = [firstShadow color]
			result = result.concat([
				"",
				"\t"+layerName+".shadowColor = [UIColor colorWithRed:"+[shadowColor red]+" green:"+[shadowColor green]+" blue:"+[shadowColor blue]+" alpha:"+[shadowColor alpha]+"].CGColor;",
				"\t"+layerName+".shadowOffset = CGSizeMake("+[firstShadow offsetX]+","+-[firstShadow offsetY]+");",
				"\t"+layerName+".shadowRadius = "+[firstShadow blurRadius]+";",
				"\t"+layerName+".shadowOpacity = 1.0;"
			])
		}
	}
		
	var opacity = [[[layer style] contextSettings] opacity]
	
	result = result.concat([
		"",
		"\t"+layerName+".opacity = " + opacity + ";"
	])

	return result
}

function processPoint(layerName,index,previousPoint,point,absoluteRect,rootFrame) {

	// var proportionW = [absoluteRect width]/[rootFrame width]
// 	var proportionH = [absoluteRect height]/[rootFrame height]
//
// 	log("Proportions:" + proportionW + " " + proportionH)
//
// 	var proportion = proportionW
// 	if (proportionW>proportionH) proportion = proportionH
	
	var proportion = 1
	
	var result = []
	var x = (point.point().x*[absoluteRect width]+[absoluteRect x])*proportion
	var y = (point.point().y*[absoluteRect height]+[absoluteRect y])*proportion
	var controlPoint1x = (previousPoint.curveFrom().x*[absoluteRect width]+[absoluteRect x])*proportion
	var controlPoint1y = (previousPoint.curveFrom().y*[absoluteRect height]+[absoluteRect y])*proportion
	var controlPoint2x = (point.curveTo().x*[absoluteRect width]+[absoluteRect x])*proportion
	var controlPoint2y = (point.curveTo().y*[absoluteRect height]+[absoluteRect y])*proportion
	
	if (index==0) {
		result.push("\t["+layerName+"Path moveToPoint:CGPointMake("+x+","+y+")];")
	}
	else if (point.curveFrom() && point.curveTo()) {
		result.push("\t["+layerName+"Path addCurveToPoint:CGPointMake("+x+","+y+") controlPoint1:CGPointMake("+controlPoint1x+","+controlPoint1y+") controlPoint2:CGPointMake("+controlPoint2x+","+controlPoint2y+")];")
	}
	else {
		result.push("\t["+layerName+"Path addLineToPoint:CGPointMake("+x+","+y+")];")
	}
	
	return result
}

function processBezierLayer(layer,rootFrame) {
	log("processing bezier layer " + layer)
	
	var result = []
	if(layer && layer.isKindOfClass(MSShapePathLayer)) {

		var parentLayer = [layer parentGroup]
		var absoluteRect = [parentLayer frame]
			
		var layerName = com.buscarini.nameForVariable(parentLayer.name())

		var path = layer.path()
			
		log("absoluteRect: " + [absoluteRect x] + " " + [absoluteRect y] + " " + [absoluteRect width] + " " + [absoluteRect height])
		
		result = result.concat([
			"\tCAShapeLayer *" + layerName + " = [CAShapeLayer layer];",
			"\tUIBezierPath *"+layerName+"Path = [UIBezierPath bezierPath];",
			""
		])

		log("processing points")

		var points = path.points()
		for (var j = 0; j < [points count]; j++) {
			
			log("processing point: " + j)

		    var point = [points objectAtIndex:j]

			var previousPoint = null				
			if (j==0) {
			    previousPoint = [points objectAtIndex:[points count]-1]
			}
			else {
			    previousPoint = [points objectAtIndex:j-1]
			}
			
			result = result.concat(processPoint(layerName,j,previousPoint,point,absoluteRect,rootFrame))			
			
			if (j==[points count]-1) {
				point = [points objectAtIndex:0]
				
			    previousPoint = [points objectAtIndex:j]
				result = result.concat(processPoint(layerName,j,previousPoint,point,absoluteRect,rootFrame))
			}
		}
		
		result = result.concat([
			"\t["+layerName+"Path closePath];",
			"",
			"\t"+layerName+".path = "+layerName+"Path.CGPath;",
			"",
			"\t[self.layer insertSublayer:"+layerName+" atIndex:0];"
		])
		
		result = result.concat(processLayerStyle(layerName,parentLayer))
		
		// var layerStyle = [parentLayer style]
//
// 		if ([[layerStyle fills] count]>0) {
// 			var firstFill = null
// 			for (var fillIndex = 0; fillIndex < [[layerStyle fills] count]; fillIndex++) {
// 				var fill = [[layerStyle fills] objectAtIndex:fillIndex]
// 				if ([fill isEnabled]) {
// 					firstFill = fill
// 					break;
// 				}
// 			}
//
// 			if (firstFill) {
// 				var fillColor = [firstFill color]
//
// 				result = result.concat([
// 					"",
// 					"\t"+layerName+".fillColor = [UIColor colorWithRed:"+[fillColor red]+" green:"+[fillColor green]+" blue:"+[fillColor blue]+" alpha:"+[fillColor alpha]+"].CGColor;"
// 				])
// 			}
// 		}
//
// 		if ([[layerStyle borders] count]>0) {
// 			var firstBorder = null
// 			for (var borderIndex = 0; borderIndex < [[layerStyle borders] count]; borderIndex++) {
// 				var border = [[layerStyle borders] objectAtIndex:borderIndex]
// 				if ([border isEnabled]) {
// 					firstBorder = border
// 					break;
// 				}
// 			}
//
// 			if (firstBorder) {
// 				var borderColor = [firstBorder color]
// 				result = result.concat([
// 					"",
// 					"\t"+layerName+".strokeColor = [UIColor colorWithRed:"+[borderColor red]+" green:"+[borderColor green]+" blue:"+[borderColor blue]+" alpha:"+[borderColor alpha]+"].CGColor;",
// 					"\t"+layerName+".lineWidth = "+[firstBorder thickness]+";"
// 				])
// 			}
// 		}
//
// 		if ([[layerStyle shadows] count]>0) {
// 			var firstShadow = null
// 			for (var shadowIndex = 0; shadowIndex < [[layerStyle shadows] count]; shadowIndex++) {
// 				var shadow = [[layerStyle shadows] objectAtIndex:shadowIndex]
// 				if ([shadow isEnabled]) {
// 					firstShadow = shadow
// 					break;
// 				}
// 			}
//
// 			if (firstShadow) {
// 				var shadowColor = [firstShadow color]
// 				result = result.concat([
// 					"",
// 					"\t"+layerName+".shadowColor = [UIColor colorWithRed:"+[shadowColor red]+" green:"+[shadowColor green]+" blue:"+[shadowColor blue]+" alpha:"+[shadowColor alpha]+"].CGColor;",
// 					"\t"+layerName+".shadowOffset = CGSizeMake("+[firstShadow offsetX]+","+-[firstShadow offsetY]+");",
// 					"\t"+layerName+".shadowRadius = "+[firstShadow blurRadius]+";",
// 					"\t"+layerName+".shadowOpacity = 1.0;"
// 				])
// 			}
// 		}
	}

	return result
}

function processLayer(layer,rootFrame) {
	log("processing layer " + layer)
	
	var result = []

	if (!layer || !layer.isVisible()) return result
			
	if (isGroup(layer)) {
	    var sublayers = [layer layers];
	    for (var sub=([sublayers count] - 1); sub >= 0; sub--) {
	        var sublayer = [sublayers objectAtIndex:sub]
			result = result.concat(processLayer(sublayer,rootFrame))
		}
	}
	else if (layer.isKindOfClass(MSShapeGroup))  {
		sublayer = [[layer layers] objectAtIndex:0]
		result = result.concat(processLayer(sublayer,rootFrame))
	}
	else if (layer.isKindOfClass(MSShapePathLayer)) {
		result = result.concat(processBezierLayer(layer,rootFrame))
	}

	return result
}

if ([selection count]<=0) {
	[doc showMessage:"Nothing selected"];
}
else {
	var viewName = null
	if ([selection count]==1) {
		var selectedLayer = selection[0]
		viewName = com.buscarini.normalizeName(selectedLayer.name())
	}
	else {
		viewName = com.buscarini.normalizeName([doc askForUserInput:"View class name?" initialValue:"MyView"])
	}
	
	var panel = [NSOpenPanel openPanel]
		log("panel " + panel)
	[panel setAllowsMultipleSelection:false];
	[panel setCanChooseDirectories:true];
	[panel setCanChooseFiles:false];
	
	var result = [panel runModal]
	log("path choose result: " + result)
		
	if (result == NSFileHandlingPanelOKButton) {
		var path = [[panel URLs] lastObject];
	
		var headerFile = [path URLByAppendingPathComponent:viewName + ".h"]
		var implementationFile = [path URLByAppendingPathComponent:viewName + ".m"]
			
		log("Final header and imp files: " + headerFile + " " + implementationFile)

		var header = [	""
						,"#import <UIKit/UIKit.h>",
						"",
						"IB_DESIGNABLE",
						"@interface " + viewName + " : UIView",
						"",
						"@end",
						""
						]

		var implementation = [ 	"#import \"" + viewName + ".h\"",
								"",
								"#import <QuartzCore/QuartzCore.h>",
								"",
								"@interface " + viewName + "() {",
								"}",
								"@end",
								"",
								"@implementation "+viewName+"",
								"",
								"- (id)initWithFrame:(CGRect)frame",
								"{",
								"\tself = [super initWithFrame:frame];",
								"\tif (self) {",
								"\t\t[self performInit];",
								"\t}",
								"\treturn self;",
								"}",
								"",
								"- (id)initWithCoder:(NSCoder *)aDecoder",
								"{",
								"\tself = [super initWithCoder:aDecoder];",
								"\tif (self) {",
								"\t\t[self performInit];",
								"\t}",
								"\treturn self;",
								"}",
								"",
								"- (void) performInit {"
								]

		for (var i=0; i<[selection count]; i++) {
			var layer = [selection objectAtIndex:i];
			implementation = implementation.concat(processLayer(layer,layer.frame()))			
		}
	
		implementation.push("}")
		implementation.push("")
		implementation.push("@end")
		implementation.push("")

		log("Writing files")

		var fileManager = [NSFileManager defaultManager];
	
		header = header.join('\n')
		implementation = implementation.join('\n')
		
		var headerString = [NSString stringWithString:header]

		if ([headerString writeToURL:headerFile atomically:true encoding:NSUTF8StringEncoding error:null]) {
			var implementationString = [NSString stringWithString:implementation]
			if ([implementationString writeToURL:implementationFile atomically:true encoding:NSUTF8StringEncoding error:null]) {
				[doc showMessage:"Done"];
			}			
			else {
				[doc showMessage:"Error writing files"];				
			}
		}
		else {
			[doc showMessage:"Error writing files"];
		}
	}
}