// (ctrl cmd d)
// Duplicate to All Artboards
var app = [NSApplication sharedApplication];

if ([selection count]<=0) {
	[doc showMessage:"Nothing selected"];
}
else {
	
	currentArtboard = [[doc currentPage] currentArtboard];
	if (!currentArtboard) {
		[doc showMessage:"Selection is not inside an artboard"];
	}
	else {
		
		currentArtboardFrame = [currentArtboard frame];

		artboards = [[doc currentPage] artboards];
		for (i=0;i<artboards.length();i++) {
			artboard = artboards[i];
	
			if (artboard==currentArtboard) continue;
		
			artboardFrame = [artboard frame];
	
			// Use the width difference to scale
			proportion = [artboardFrame width]/[currentArtboardFrame width];
			
			for (var j=0; j<[selection count]; j++) {
				var layer = selection[j];
		
				var finalProportion = proportion;
		
				layerCopy = [layer duplicate];
		
				var locked = [layerCopy isLocked];
				if (locked) [layerCopy setIsLocked:false];
		
				[currentArtboard removeLayer:layerCopy];
				[artboard addLayer:layerCopy];

				frame = [layerCopy frame];

				height = ([frame height]*finalProportion)
				// If using the width the layer will be too big (changes in proportion between artboards), then the height will be used to calculate the proportion
				if (height>[artboardFrame height] && [frame height]<=[currentArtboardFrame height]) {
					finalProportion = [artboardFrame height]/[currentArtboardFrame height];
				}

				x = ([frame x]*finalProportion)
				y = ([frame y]*finalProportion)
				width = ([frame width]*finalProportion)
				height = ([frame height]*finalProportion)
				
				borders = [[layerCopy style] borders];
				for (var w=0;w<borders.length();w++) {
					border = borders[w];
					var thickness = [border thickness];
					thickness = thickness*finalProportion;
					[border setThickness:thickness];
				}
				
				shadows = [[layerCopy style] shadows];
				for (var w=0;w<shadows.length();w++) {
					shadow = shadows[w];
					
					var offsetX = [shadow offsetX];
					offsetX = offsetX*finalProportion;
					[shadow setOffsetX:offsetX];
					
					var offsetY = [shadow offsetY];
					offsetY = offsetY*finalProportion;
					[shadow setOffsetY:offsetY];
					
					var blurRadius = [shadow blurRadius];
					blurRadius = blurRadius*finalProportion;
					[shadow setBlurRadius:blurRadius];
					
					var spread = [shadow spread];
					spread = spread*finalProportion;
					[shadow setSpread:spread];
				}
				
				innerShadows = [[layerCopy style] innerShadows];
				for (var w=0;w<innerShadows.length();w++) {
					innerShadow = innerShadows[w];
					
					var offsetX = [innerShadow offsetX];
					offsetX = offsetX*finalProportion;
					[innerShadow setOffsetX:offsetX];
					
					var offsetY = [innerShadow offsetY];
					offsetY = offsetY*finalProportion;
					[innerShadow setOffsetY:offsetY];
					
					var blurRadius = [innerShadow blurRadius];
					blurRadius = blurRadius*finalProportion;
					[innerShadow setBlurRadius:blurRadius];
					
					var spread = [innerShadow spread];
					spread = spread*finalProportion;
					[innerShadow setSpread:spread];
				}
				

				[frame setX:Math.round(x)];
				[frame setY:Math.round(y)];
				[frame setWidth:Math.round(width)];
				[frame setHeight:Math.round(height)];
				
				[layerCopy setIsLocked:locked];
			}
		}
		
		[doc showMessage:"Finished"];
	}
}